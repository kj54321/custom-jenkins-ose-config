<?xml version='1.0' encoding='UTF-8'?>
<flow-build plugin="workflow-job@2.3">
  <actions>
    <hudson.model.CauseAction>
      <causeBag class="linked-hash-map">
        <entry>
          <hudson.triggers.SCMTrigger_-SCMTriggerCause/>
          <int>1</int>
        </entry>
      </causeBag>
    </hudson.model.CauseAction>
    <hudson.triggers.SCMTrigger_-BuildAction/>
    <hudson.model.ParametersAction>
      <parameters>
        <com.cloudbees.plugins.credentials.CredentialsParameterValue plugin="credentials@1.24">
          <name>openshift-dev</name>
          <description></description>
          <value>openshift-dev</value>
          <isDefaultValue>false</isDefaultValue>
        </com.cloudbees.plugins.credentials.CredentialsParameterValue>
      </parameters>
      <parameterDefinitionNames class="hudson.model.ParametersDefinitionProperty$1">
        <outer-class>
          <parameterDefinitions>
            <com.cloudbees.plugins.credentials.CredentialsParameterDefinition plugin="credentials@1.24">
              <name>openshift-dev</name>
              <description></description>
              <defaultValue>openshift-dev</defaultValue>
              <credentialType>org.csanchez.jenkins.plugins.kubernetes.OpenShiftBearerTokenCredentialImpl</credentialType>
              <required>true</required>
            </com.cloudbees.plugins.credentials.CredentialsParameterDefinition>
          </parameterDefinitions>
        </outer-class>
      </parameterDefinitionNames>
    </hudson.model.ParametersAction>
    <hudson.plugins.git.util.BuildData plugin="git@2.5.0">
      <buildsByBranchName>
        <entry>
          <string>refs/remotes/origin/master</string>
          <hudson.plugins.git.util.Build>
            <marked plugin="git-client@1.19.6">
              <sha1>45bad0c06323b564a98ec1b2ca5181049f4e2d4f</sha1>
              <branches class="list">
                <hudson.plugins.git.Branch>
                  <sha1 reference="../../../sha1"/>
                  <name>refs/remotes/origin/master</name>
                </hudson.plugins.git.Branch>
              </branches>
            </marked>
            <revision reference="../marked"/>
            <hudsonBuildNumber>1</hudsonBuildNumber>
          </hudson.plugins.git.util.Build>
        </entry>
      </buildsByBranchName>
      <lastBuild reference="../buildsByBranchName/entry/hudson.plugins.git.util.Build"/>
      <remoteUrls>
        <string>https://github.com/redhat-helloworld-msa/aloha</string>
      </remoteUrls>
    </hudson.plugins.git.util.BuildData>
    <hudson.plugins.git.GitTagAction plugin="git@2.5.0">
      <tags class="hudson.util.CopyOnWriteMap$Tree">
        <entry>
          <string>refs/remotes/origin/master</string>
          <list/>
        </entry>
      </tags>
      <ws>/var/lib/jenkins/jobs/JBoss Kitchensink Quickstart/workspace@script</ws>
    </hudson.plugins.git.GitTagAction>
    <org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState plugin="workflow-scm-step@2.1">
      <revisionStates>
        <entry>
          <string>git https://github.com/redhat-helloworld-msa/aloha</string>
          <hudson.scm.SCMRevisionState_-None/>
        </entry>
      </revisionStates>
    </org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState>
    <org.jenkinsci.plugins.workflow.cps.EnvActionImpl plugin="workflow-cps@2.7">
      <env class="tree-map"/>
    </org.jenkinsci.plugins.workflow.cps.EnvActionImpl>
    <jenkins.model.InterruptedBuildAction>
      <causes class="com.google.common.collect.ImmutableList">
        <jenkins.model.CauseOfInterruption_-UserInterruption>
          <user>admin</user>
        </jenkins.model.CauseOfInterruption_-UserInterruption>
      </causes>
    </jenkins.model.InterruptedBuildAction>
    <jenkins.model.InterruptedBuildAction>
      <causes class="com.google.common.collect.ImmutableList">
        <jenkins.model.CauseOfInterruption_-UserInterruption>
          <user>admin</user>
        </jenkins.model.CauseOfInterruption_-UserInterruption>
      </causes>
    </jenkins.model.InterruptedBuildAction>
  </actions>
  <queueId>3</queueId>
  <timestamp>1468441322433</timestamp>
  <startTime>1468441322434</startTime>
  <result>ABORTED</result>
  <duration>137024</duration>
  <keepLog>false</keepLog>
  <execution class="org.jenkinsci.plugins.workflow.cps.CpsFlowExecution">
    <result>ABORTED</result>
    <script>node {
    stage &apos;Git checkout&apos;
    echo &apos;Checking out git repository&apos;
    git url: &apos;https://github.com/redhat-helloworld-msa/aloha&apos;

    stage &apos;Build project with Maven&apos;
    echo &apos;Building project&apos;
    def mvnHome = tool &apos;M3&apos;
    def javaHome = tool &apos;jdk8&apos;
    sh &quot;${mvnHome}/bin/mvn package&quot;

    stage &apos;Build image and deploy in Dev&apos;
    echo &apos;Building docker image and deploying to Dev&apos;
    buildAloha(&apos;helloworld-msa-dev&apos;)

    stage &apos;Automated tests&apos;
    echo &apos;This stage simulates automated tests&apos;
    sh &quot;${mvnHome}/bin/mvn -B -Dmaven.test.failure.ignore verify&quot;

    stage &apos;Deploy to QA&apos;
    echo &apos;Deploying to QA&apos;
    deployAloha(&apos;helloworld-msa-dev&apos;, &apos;helloworld-msa-qa&apos;)

    stage &apos;Wait for approval&apos;
    input &apos;Aprove to production?&apos;

    stage &apos;Deploy to production&apos;
    echo &apos;Deploying to production&apos;
    deployAloha(&apos;helloworld-msa-dev&apos;, &apos;helloworld-msa&apos;)
}

// Creates a Build and triggers it
def buildAloha(String project){
    projectSet(project)
    sh &quot;oc new-build --binary --name=aloha -l app=aloha || echo &apos;Build exists&apos;&quot;
    sh &quot;oc start-build aloha --from-dir=. --follow&quot;
    appDeploy()
}

// Tag the ImageStream from an original project to force a deployment
def deployAloha(String origProject, String project){
    projectSet(project)
    sh &quot;oc policy add-role-to-user system:image-puller system:serviceaccount:${project}:default -n ${origProject}&quot;
    sh &quot;oc tag ${origProject}/aloha:latest ${project}/aloha:latest&quot;
    appDeploy()
}

// Login and set the project
def projectSet(String project){
    //Use a credential called openshift-dev
    withCredentials([[$class: &apos;UsernamePasswordMultiBinding&apos;, credentialsId: &apos;openshift-dev&apos;, usernameVariable: &apos;USERNAME&apos;, passwordVariable: &apos;PASSWORD&apos;]]) {
        sh &quot;oc login --insecure-skip-tls-verify=true -u $env.USERNAME -p $env.PASSWORD https://10.1.2.2:8443&quot;
    }
    sh &quot;oc new-project ${project} || echo &apos;Project exists&apos;&quot;
    sh &quot;oc project ${project}&quot;
}

// Deploy the project based on a existing ImageStream
def appDeploy(){
    sh &quot;oc new-app aloha -l app=aloha,hystrix.enabled=true || echo &apos;Aplication already Exists&apos;&quot;
    sh &quot;oc expose service aloha || echo &apos;Service already exposed&apos;&quot;
    sh &apos;oc patch dc/aloha -p \&apos;{&quot;spec&quot;:{&quot;template&quot;:{&quot;spec&quot;:{&quot;containers&quot;:[{&quot;name&quot;:&quot;aloha&quot;,&quot;ports&quot;:[{&quot;containerPort&quot;: 8778,&quot;name&quot;:&quot;jolokia&quot;}]}]}}}}\&apos;&apos;
    sh &apos;oc patch dc/aloha -p \&apos;{&quot;spec&quot;:{&quot;template&quot;:{&quot;spec&quot;:{&quot;containers&quot;:[{&quot;name&quot;:&quot;aloha&quot;,&quot;readinessProbe&quot;:{&quot;httpGet&quot;:{&quot;path&quot;:&quot;/api/health&quot;,&quot;port&quot;:8080}}}]}}}}\&apos;&apos;
}

</script>
    <loadedScripts class="map"/>
    <sandbox>true</sandbox>
    <iota>26</iota>
    <head>1:26</head>
  </execution>
  <checkouts class="hudson.util.PersistedList">
    <org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
      <scm class="hudson.plugins.git.GitSCM" plugin="git@2.5.0">
        <configVersion>2</configVersion>
        <userRemoteConfigs>
          <hudson.plugins.git.UserRemoteConfig>
            <url>https://github.com/redhat-helloworld-msa/aloha</url>
          </hudson.plugins.git.UserRemoteConfig>
        </userRemoteConfigs>
        <branches>
          <hudson.plugins.git.BranchSpec>
            <name>*/master</name>
          </hudson.plugins.git.BranchSpec>
        </branches>
        <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
        <submoduleCfg class="list"/>
        <extensions/>
      </scm>
      <node></node>
      <workspace>/var/lib/jenkins/jobs/JBoss Kitchensink Quickstart/workspace@script</workspace>
      <changelogFile>/var/lib/jenkins/jobs/JBoss Kitchensink Quickstart/builds/1/changelog0.xml</changelogFile>
      <pollingBaseline class="hudson.scm.SCMRevisionState$None" reference="../../../actions/org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState/revisionStates/entry/hudson.scm.SCMRevisionState_-None"/>
    </org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
    <org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
      <scm class="hudson.plugins.git.GitSCM" plugin="git@2.5.0">
        <configVersion>2</configVersion>
        <userRemoteConfigs>
          <hudson.plugins.git.UserRemoteConfig>
            <url>https://github.com/redhat-helloworld-msa/aloha</url>
          </hudson.plugins.git.UserRemoteConfig>
        </userRemoteConfigs>
        <branches class="singleton-list">
          <hudson.plugins.git.BranchSpec>
            <name>*/master</name>
          </hudson.plugins.git.BranchSpec>
        </branches>
        <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
        <submoduleCfg class="empty-list"/>
        <extensions>
          <hudson.plugins.git.extensions.impl.LocalBranch>
            <localBranch>master</localBranch>
          </hudson.plugins.git.extensions.impl.LocalBranch>
        </extensions>
      </scm>
      <node></node>
      <workspace>/var/lib/jenkins/jobs/JBoss Kitchensink Quickstart/workspace</workspace>
      <changelogFile>/var/lib/jenkins/jobs/JBoss Kitchensink Quickstart/builds/1/changelog1.xml</changelogFile>
      <pollingBaseline class="hudson.scm.SCMRevisionState$None" reference="../../../actions/org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState/revisionStates/entry/hudson.scm.SCMRevisionState_-None"/>
    </org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
  </checkouts>
</flow-build>